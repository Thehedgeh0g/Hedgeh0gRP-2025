version: '3.8'

services:
  centrifugo:
    image: centrifugo/centrifugo:latest
    container_name: centrifugo
    restart: always
    ports:
      - "8000:8000"
      - "3000:3000"
    environment:
      - CENTRIFUGO_ADMIN_PASSWORD=admin_password
      - CENTRIFUGO_ADMIN_SECRET=admin_secret
    networks:
      - app-network
    volumes:
      - ./centrifugo/config.json:/centrifugo/config.json

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - app-network

  auth:
    container_name: auth
    build:
      context: ./microservices/auth
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      DB_MAIN: redis-main:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-pass}
      DB_PROTOKEY: protokey:6370
    networks:
      - app-network
    depends_on:
      redis-main:
        condition: service_healthy

  valuator1:
    container_name: valuator1
    build:
      context: ./microservices/valuator
      dockerfile: Dockerfile
    environment:
      PORT: 5001
      DB_MAIN: redis-main:6379
      DB_RU: redis-ru:6379
      DB_EU: redis-eu:6379
      DB_ASIA: redis-asia:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-pass}
      AMQP_USER: ${AMQP_USER:-guest}
      AMQP_PASS: ${AMQP_PASS:-guest}
    networks:
      - app-network
    volumes:
      - ./microservices/valuator/pages:/app/pages
    depends_on:
      redis-main:
        condition: service_healthy
      rabbit:
        condition: service_healthy

  valuator2:
    container_name: valuator2
    build:
      context: ./microservices/valuator
      dockerfile: Dockerfile
    environment:
      PORT: 5002
      DB_MAIN: redis-main:6379
      DB_RU: redis-ru:6379
      DB_EU: redis-eu:6379
      DB_ASIA: redis-asia:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-pass}
      AMQP_USER: ${AMQP_USER:-guest}
      AMQP_PASS: ${AMQP_PASS:-guest}
    volumes:
      - ./microservices/valuator/pages:/app/pages
    networks:
      - app-network
    depends_on:
      redis-main:
        condition: service_healthy
      rabbit:
        condition: service_healthy

  calculator:
    container_name: calculator
    build:
      context: ./microservices/rankcalculator
      dockerfile: Dockerfile
    networks:
      - app-network
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-pass}
      AMQP_USER: ${AMQP_USER:-guest}
      AMQP_PASS: ${AMQP_PASS:-guest}
    depends_on:
      redis-main:
        condition: service_healthy
      rabbit:
        condition: service_healthy

  eventslogger:
    container_name: eventslogger
    build:
      context: ./microservices/eventslogger
      dockerfile: Dockerfile
    environment:
      AMQP_USER: ${AMQP_USER:-guest}
      AMQP_PASS: ${AMQP_PASS:-guest}
    networks:
      - app-network
    depends_on:
      redis-main:
        condition: service_healthy
      rabbit:
        condition: service_healthy

  protokey:
    container_name: protokey
    build:
      context: ./microservices/protokey
      dockerfile: Dockerfile
    environment:
      PORT: 6370
    ports:
      - "127.0.0.1:6370:6370"
    networks:
      - app-network

  redis-main:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-pass}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      redis-ru:
        condition: service_healthy
      redis-eu:
        condition: service_healthy
      redis-asia:
        condition: service_healthy
    networks:
      - app-network

  redis-ru:
    image: redis:latest
    ports:
      - "127.0.0.1:6378:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  redis-eu:
    image: redis:latest
    ports:
      - "127.0.0.1:6377:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  redis-asia:
    image: redis:latest
    ports:
      - "127.0.0.1:6376:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  rabbit:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${AMQP_USER}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASS}
    networks:
      - app-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  app-network:

volumes:
  redis_data:
  rabbitmq_data: